#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

#source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC

### If it's a multi-instance app, meaning it can be installed several times independently
### The id of the app as stated in the manifest is available as $YNH_APP_ID
### The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
### The app instance name is available as $YNH_APP_INSTANCE_NAME
###    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
###    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
###    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
### The app instance name is probably what interests you most, since this is
### guaranteed to be unique. This is a good unique identifier to define installation path,
### db names, ...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

### If the app uses nginx as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uwsgi), the final path should be "/opt/yunohost/$app"
final_path=/opt/yunohost/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path "$path_url")

# Check web path availability
ynh_webpath_available "$domain" "$path_url"


#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" path "$path_url"
ynh_app_setting_set "$app" is_public "$is_public"

#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Configuring ports..."
### Use these lines if you have to open a port for the application
### `ynh_find_port` will find the first available port starting from the given port.
### If you're not using these lines:
###		- Remove the section "CLOSE A PORT" in the remove script

# Find a free port
port=$(ynh_find_port 32400)
# Open this port
yunohost firewall allow --no-upnp TCP "$port" 2>&1
yunohost firewall allow --no-upnp UDP "$port" 2>&1
ynh_app_setting_set "$app" port "$port"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Fetching Plex releases..."

# Get the machine architecture
arch=$(uname -m)

# Check the architecture and set variable accordingly
if [ "$arch" = "x86_64" ]; then
  BUILD="linux-x86_64"
elif [ "$arch" = "i386" ]; then
  BUILD="linux-x86"
elif [ "$arch" = "aarch64" ]; then
  BUILD="linux-aarch64"
elif [ "$arch" = "armv7l" ]; then
  BUILD="linux-armv7neon"
else
  ynh_die "Your arch doesn't have a debian-compatible Plex release"
fi

# Fetch releases from Plex
PLEX_INDEX=$(curl -s https://plex.tv/pms/downloads/5.json);
SOURCE_URL=$(echo $PLEX_INDEX | jq -r ".computer.Linux.releases[]  | select(.distro == \"debian\" and .build == \"$BUILD\") | .url");
DEB_FILE="$final_path/plexmediaserver.deb";

ynh_script_progression --message="Downloading PlexMediaManager..."
ynh_app_setting_set "$app" final_path "$final_path"
mkdir -p "$final_path"
wget --tries 3 --no-dns-cache --timeout 900 --no-verbose --output-document=$DEB_FILE $SOURCE_URL 2>&1

# Verifying checksum
SOURCE_SUM=$(echo $PLEX_INDEX | jq -r ".computer.Linux.releases[]  | select(.distro == \"debian\" and .build == \"$BUILD\") | .checksum");
ACTUAL_SUM=$(sha1sum $DEB_FILE | cut -c 1-40)

if [ "$SOURCE_SUM" != "$ACTUAL_SUM" ]
then
  rm -f "$DEB_FILE"
  ynh_die --message="Download file have incorrect checksum. Aborting."
fi

#==============================================
# INSTALL PLEX
#==============================================
ynh_script_progression --message="Installing PlexMediaManager..."

dpkg --install $DEB_FILE
rm -f $DEB_FILE

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create "$app"

#=================================================
# MODIFY A CONFIG FILE
#=================================================
#cp -a ../conf/onlyoffice-documentserver.conf /etc/onlyoffice/documentserver/nginx/onlyoffice-documentserver.conf
#ynh_replace_string "__NEXTCLOUDDOMAIN__" "$nextcloud_domain" "/etc/loolwsd/loolwsd.xml"
#ynh_replace_string "__PASSWORD__" "$password" "/etc/loolwsd/loolwsd.xml"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

### `ynh_store_file_checksum` is used to store the checksum of a file.
### That way, during the upgrade script, by using `ynh_backup_if_checksum_is_different`,
### you can make a backup of this file before modifying it again if the admin had modified it.

# Calculate and store the config file checksum into the app settings
#ynh_store_file_checksum "/etc/onlyoffice/documentserver/nginx/onlyoffice-documentserver.conf"


#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

### For security reason, any app should set the permissions to root: before anything else.
### Then, if write authorization is needed, any access should be given only to directories
### that really need such authorization.

# Set permissions to app files
#chown -R root: /etc/loolwsd


#=================================================
# SETUP SSOWAT
#=================================================

# unprotected_uris allows SSO credentials to be passed anyway.
# If app is public, add url to SSOWat conf as skipped_uris
if [ "$is_public" -eq 1 ]; then
  # unprotected_uris allows SSO credentials to be passed anyway.
  ynh_app_setting_set "$app" unprotected_uris "/"
fi

# Reload services
systemctl reload nginx
